def minMaxTime(jobs, k):
    def can_assign_jobs(maxTime):
        workers = [0] * k
        return backtrack(jobs, workers, 0, maxTime)
    
    def backtrack(jobs, workers, index, maxTime):
        if index >= len(jobs):
            return True
        
        job = jobs[index]
        for i in range(k):
            if workers[i] + job <= maxTime:
                workers[i] += job
                if backtrack(jobs, workers, index + 1, maxTime):
                    return True
                workers[i] -= job
                # Optimization: if a worker has no job, subsequent workers will also have no job
                if workers[i] == 0:
                    break
        return False
    
    left, right = max(jobs), sum(jobs)
    
    while left < right:
        mid = (left + right) // 2
        if can_assign_jobs(mid):
            right = mid
        else:
            left = mid + 1
    
    return left

# Example usage:
jobs = [3, 2, 3]
k = 3
print(minMaxTime(jobs, k))  # Output: 3
