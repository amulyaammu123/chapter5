def jobScheduling(startTime, endTime, profit):
    jobs = sorted(zip(startTime, endTime, profit), key=lambda x: x[1])  # Sort by endTime
    n = len(jobs)
    
    # Helper function to find the latest job that finishes before startTime
    def find_last_non_conflicting_job(jobs, i):
        lo, hi = 0, i - 1
        while lo <= hi:
            mid = (lo + hi) // 2
            if jobs[mid][1] <= jobs[i][0]:
                if jobs[mid + 1][1] <= jobs[i][0]:
                    lo = mid + 1
                else:
                    return mid
            else:
                hi = mid - 1
        return -1
    
    dp = [0] * n
    dp[0] = jobs[0][2]  # Profit of the first job
    
    for i in range(1, n):
        current_profit = jobs[i][2]
        last_non_conflicting = find_last_non_conflicting_job(jobs, i)
        if last_non_conflicting != -1:
            current_profit += dp[last_non_conflicting]
        dp[i] = max(dp[i-1], current_profit)
    
    return dp[n-1]

# Example usage:
startTime = [1, 2, 3, 3]
endTime = [3, 4, 5, 6]
profit = [50, 10, 40, 70]
print(jobScheduling(startTime, endTime, profit))  # Output: 120
