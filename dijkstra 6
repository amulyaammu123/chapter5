import heapq

def dijkstra(edges, n, source, target):
    graph = [[] for _ in range(n)]
    for u, v, w in edges:
        graph[u].append((v, w))
        graph[v].append((u, w))  # Assuming undirected graph
    
    dist = [float('inf')] * n
    dist[source] = 0
    pq = [(0, source)]  # (distance, vertex)
    
    while pq:
        d, u = heapq.heappop(pq)
        
        if u == target:
            return dist[u]
        
        if d > dist[u]:
            continue
        
        for v, weight in graph[u]:
            if dist[u] + weight < dist[v]:
                dist[v] = dist[u] + weight
                heapq.heappush(pq, (dist[v], v))
    
    return dist[target]

# Example usage:
n = 6
edges = [
    (0, 1, 7), (0, 2, 9), (0, 5, 14),
    (1, 2, 10), (1, 3, 15), 
    (2, 3, 11), (2, 5, 2),
    (3, 4, 6),
    (4, 5, 9)
]
source = 0
target = 4
print(dijkstra(edges, n, source, target))  # Output: 20
