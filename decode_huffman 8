class TreeNode:
    def __init__(self, char=None, left=None, right=None):
        self.char = char
        self.left = left
        self.right = right

def decode_huffman(encoded_string, root):
    if not encoded_string:
        return ""
    
    decoded_message = []
    current_node = root
    
    for bit in encoded_string:
        if bit == '0':
            current_node = current_node.left
        elif bit == '1':
            current_node = current_node.right
        
        # Check if current_node is leaf node
        if current_node.left is None and current_node.right is None:
            decoded_message.append(current_node.char)
            current_node = root  # Reset to root for next character
    
    return ''.join(decoded_message)

# Example usage:
characters = ['a', 'b', 'c', 'd']
frequencies = [5, 9, 12, 13]

# Construct the Huffman Tree (assuming known structure from previous steps)
# Here's a simplified construction for this example:
left = TreeNode('a')
right = TreeNode()
root = TreeNode(None, left, right)

encoded_string = '1101100111110'
decoded_message = decode_huffman(encoded_string, root)
print(decoded_message)  # Output: "abacd"
