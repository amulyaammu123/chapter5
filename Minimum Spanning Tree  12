class UnionFind:
    def __init__(self, n):
        self.parent = list(range(n))
        self.rank = [1] * n
    
    def find(self, u):
        if self.parent[u] != u:
            self.parent[u] = self.find(self.parent[u])
        return self.parent[u]
    
    def union(self, u, v):
        root_u = self.find(u)
        root_v = self.find(v)
        
        if root_u != root_v:
            if self.rank[root_u] > self.rank[root_v]:
                self.parent[root_v] = root_u
            elif self.rank[root_u] < self.rank[root_v]:
                self.parent[root_u] = root_v
            else:
                self.parent[root_v] = root_u
                self.rank[root_u] += 1
            return True
        return False

def kruskal_mst(n, edges):
    edges.sort(key=lambda x: x[2])
    
    uf = UnionFind(n)
    mst = []
    total_weight = 0
    edge_count = 0
    
    for u, v, weight in edges:
        if uf.union(u, v):
            mst.append((u, v, weight))
            total_weight += weight
            edge_count += 1
            if edge_count == n - 1:
                break
    
    return mst, total_weight

def is_mst_unique(n, edges, given_mst):
    # Step 1: Compute MST using Kruskal's algorithm
    computed_mst, computed_mst_weight = kruskal_mst(n, edges)
    
    # Step 2: Check if the given MST is unique
    if computed_mst == given_mst:
        return True, None
    
    # Step 3: If not unique, return the computed MST as another possible MST
    return False, computed_mst

# Example usage:
n = 4
edges = [
    (0, 1, 10),
    (0, 2, 6),
    (0, 3, 5),
    (1, 3, 15),
    (2, 3, 4)
]
given_mst = [(2, 3, 4), (0, 3, 5), (0, 1, 10)]

unique, another_mst = is_mst_unique(n, edges, given_mst)
print("Is the given MST unique?", unique)
if not unique:
    print("Another possible MST:", another_mst)
